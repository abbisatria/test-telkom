import Head from 'next/head'
import Image from 'next/image'
import { Button, Card, CardBody, CardFooter, Col, Container, FormGroup, FormText, Input, InputGroup, InputGroupText, Label, Row } from 'reactstrap'
import Empty from '../assets/img/empty.svg'
import IcSearch from '../assets/img/ic-search.svg'
import IcUser from '../assets/img/ic-user.svg'
import Divider from '../assets/img/divider.svg'
import { useState } from 'react'
import ReactDatePicker from 'react-datepicker'

export default function Home() {

  const [fullName, setFullName] = useState({
    value: '',
    valid: null
  })
  const [email, setEmail] = useState({
    value: '',
    valid: null
  })
  const [address, setAddress] = useState({
    value: '',
    valid: null
  })
  const [phoneNumber, setPhoneNumber] = useState({
    value: '',
    valid: null
  })
  const [password, setPassword] = useState({
    value: '',
    valid: null
  })
  const [date, setDate] = useState({
    value: '',
    valid: null
  })

  const onChangeValue = (type, value) => {
    if (type === 'fullName') {
      const validate = /^[a-z\d\-_\s]+$/i
      if (value.length > 50) {
        setFullName({ value, valid: false });
      } else {
        setFullName({ value, valid: validate.test(value) });
      }
    }
    if (type === 'email') {
      const validate = new RegExp('[a-z0-9]+@[a-z]+\.[a-z]{2,3}');
      setEmail({ value, valid: validate.test(value) })
    }
    if (type === 'address') {
      if (value.length > 255) {
        setAddress({ value, valid: false })
      } else {
        setAddress({ value, valid: true })
      }
    }
    if (type === 'phone') {
      const validate = /^(^\+62|62|^08)(\d{3,4}-?){2}\d{3,4}$/g
      setPhoneNumber({ value, valid: validate.test(`+62${value}`) })
    }
    if (type === 'password') {
      const validate = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})")
      setPassword({ value, valid: validate.test(value) })
    }
  }

  const resetValue = () => {
    setFullName({
      value: '',
      valid: null
    })
    setEmail({
      value: '',
      valid: null
    })
    setDate({
      value: '',
      valid: null
    })
    setAddress({
      value: '',
      valid: null
    })
    setPhoneNumber({
      value: '',
      valid: null
    })
    setPassword({
      value: '',
      valid: null
    })
  }

  return (
    <div>
      <Head>
        <title>Test Telkom</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <div className='px-8 pt-5'>
          <h5>Personal Information</h5>
          <p>This information will be displayed publicly so be careful what you share. </p>
          <FormGroup>
            <Label>Full Name</Label>
            <Input className='w-50' placeholder='Your Name' value={fullName.value} invalid={fullName.valid === false} valid={fullName.valid} onChange={(e) => onChangeValue('fullName', e.target.value)}  />
          </FormGroup>
          <FormGroup>
            <Label>Email address</Label>
            <Input className='w-50' placeholder='yourmail@mail.com' value={email.value} type='email' invalid={email.valid === false} valid={email.valid} onChange={(e) => onChangeValue('email', e.target.value)} />
          </FormGroup>
          <FormGroup>
            <Label>Date of Birth</Label>
            <ReactDatePicker className={date.valid === false ? 'form-control w-50 is-invalid' : date.valid ? 'form-control w-50 is-valid' : 'form-control w-50'} selected={date.value} onChange={(date) => setDate({ value: date, valid: '' })} placeholderText="dd/mm/yyyy" onBlur={() => {
              if (date.value) {
                setDate({ value: date.value, valid: true })
              } else {
                setDate({ value: date.value, valid: false })
              }
            }} />
          </FormGroup>
          <FormGroup>
            <Label>Address</Label>
            <Input placeholder='Street Address' value={address.value} invalid={address.valid === false} valid={address.valid} onChange={(e) => onChangeValue('address', e.target.value)} />
          </FormGroup>
          <FormGroup>
            <Label>Phone Number</Label>
            <InputGroup className='w-50'>
              <InputGroupText>
                +62
              </InputGroupText>
              <Input placeholder="e.g 81328112993" value={phoneNumber.value} invalid={phoneNumber.valid === false} valid={phoneNumber.valid} onChange={(e) => onChangeValue('phone', e.target.value)} />
            </InputGroup>
          </FormGroup>
          <FormGroup>
            <Label>Password</Label>
            <Input className='w-50' placeholder='**********' type='password' value={password.value} invalid={password.valid === false} valid={password.valid} onChange={(e) => onChangeValue('password', e.target.value)} />
            <FormText>
              Minimum of 6 characters, with upper & lower case, a number and a symbol.
            </FormText>
          </FormGroup>
          <hr />
          <Row className='mb-5'>
            <Col xs={6} className='pe-0'>
              <Button outline className='me-2'>Cancel</Button>
              <Button color='primary'>Submit</Button>
            </Col>
            <Col xs={6} className='d-flex justify-content-end ps-0'>
              <Button color='primary' className='btn-generate'>
                Auto Generate
              </Button>
            </Col>
          </Row>
        </div>
        <div className='clear-list-user'>
          <Button color='light' disabled>
            Clear All List User
          </Button>
          <hr />
        </div>
        <div className='pb-5'>
          <div className='input-search'>
            <InputGroup>
              <InputGroupText>
                <Image src={IcSearch} alt='Search' />
              </InputGroupText>
              <Input placeholder="Search Anything" />
            </InputGroup>
          </div>
          <div className='text-center'>
            <Image src={Empty} alt='Empty' />
            <p>No List User</p>
          </div>
          {/* ::Todo Card & Redux */}
          {/* <Row>
            <Col md={3}>
              <Card className='border-0 shadow card-item'>
                <CardBody>
                  test
                </CardBody>
                <CardFooter>
                  <Row>
                    <Col className='p-2 text-center icon'>
                      <div className='text-center'>
                        <div className='divider'>
                          <Image src={Divider} alt='divider' />
                        </div>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                    <Col className='p-2 text-center'>
                      <div className='icon'>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                    <Col className='p-2 text-center'>
                      <div className='icon'>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                    <Col className='p-2 text-center'>
                      <div className='icon'>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                    <Col className='p-2 text-center'>
                      <div className='icon'>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                    <Col className='p-2 text-center'>
                      <div className='icon'>
                        <Image src={IcUser} alt='user' />
                      </div>
                    </Col>
                  </Row>
                </CardFooter>
              </Card>
            </Col>
          </Row> */}
        </div>
      </Container>
    </div>
  )
}
